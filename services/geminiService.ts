
import { GoogleGenAI, Modality } from "@google/genai";
import { UploadedPhoto } from '../types';

const PROMPT = `Please generate a photorealistic image where the adult from the second photo is warmly hugging the child from the first photo. The two versions of the person should appear as the same individual at different ages, interacting naturally and affectionately. The background should be a completely smooth, soft, neutral white with natural, soft lighting to focus on the subjects.`;

export async function generateReunificationImage(
  childPhoto: UploadedPhoto,
  adultPhoto: UploadedPhoto
): Promise<string> {
  const ai = new GoogleGenAI({ apiKey: process.env.API_KEY as string });

  try {
    const response = await ai.models.generateContent({
      model: 'gemini-2.5-flash-image',
      contents: {
        parts: [
          {
            inlineData: {
              data: childPhoto.base64,
              mimeType: childPhoto.mimeType,
            },
          },
          {
            inlineData: {
              data: adultPhoto.base64,
              mimeType: adultPhoto.mimeType,
            },
          },
          {
            text: PROMPT,
          },
        ],
      },
      config: {
        responseModalities: [Modality.IMAGE],
      },
    });

    for (const part of response.candidates?.[0]?.content?.parts ?? []) {
        if (part.inlineData) {
          const base64ImageBytes: string = part.inlineData.data;
          return `data:${part.inlineData.mimeType};base64,${base64ImageBytes}`;
        }
    }

    throw new Error("No image was generated by the API.");

  } catch (error) {
    console.error("Error generating image with Gemini:", error);
    throw new Error(
      "Failed to generate image. Please check the console for more details."
    );
  }
}
